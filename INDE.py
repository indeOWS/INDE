# -*- coding: utf-8 -*-
"""
/***************************************************************************
 INDE
                                 A QGIS plugin
 This plugin allows connection to all ows services available in Brazil National Spatial Data Infrastructure
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-10-26
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Julierme G Pinheiro / Censipam - Ministry of Defense
        email                : julierme.pinheiro@sipam.gov.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QPixmap
from qgis.PyQt.QtWidgets import QAction, QMainWindow, QApplication, QLabel, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .INDE_dialog import INDEDialog
import os.path


class INDE:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'INDE_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&INDE')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('INDE', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/INDE/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'INDE'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&INDE'),
                action)
            self.iface.removeToolBarIcon(action)

    def noService(self, ogc, institution):
        msg = QMessageBox()
        msg.setWindowTitle('No Service')
        msg.setText('No ' + ogc + ' available for ' + institution)
        msg.setIcon(QMessageBox.Information)
        msg.exec_()

    def addAllItems(self, items, id):
        if id == 0:
            self.dlg.listWidgetSelectedInstitutions.clear()
            self.dlg.listWidgetSelectedInstitutions.addItems(items)
        else:
            self.dlg.listWidgetSelectedBasemaps.clear()
            self.dlg.listWidgetSelectedBasemaps.addItems(items)

    def populatelistWidget(self, items, id):
        if id == 0:
            self.dlg.listWidgetInstitutionAvailableWMS.clear()
            self.dlg.listWidgetInstitutionAvailableWMS.addItems(items)
        # setting selection mode property
        # (2 = QAbstractItemView.MultiSelection)
        # (3 = QAbstractItemView.ExtendedSelection)
        # (4 = QAbstractItemView.ContiguousSelection)
            self.dlg.listWidgetInstitutionAvailableWMS.setSelectionMode(3)
        else:
            self.dlg.listWidgetBasemapList.clear()
            self.dlg.listWidgetBasemapList.addItems(items)
            self.dlg.listWidgetBasemapList.setSelectionMode(3)

    def addSelectedItems(self, id):
        if id == 0:
            itemsSelected = self.dlg.listWidgetInstitutionAvailableWMS.selectedItems()
            numberSelectedElements = len(itemsSelected)
            if (numberSelectedElements == 0):
                msg = QMessageBox()
                msg.setWindowTitle('Add Items')
                msg.setText('You must select an item to be added')
                msg.setIcon(QMessageBox.Information)
                msg.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
                msg.setDetailedText(
                    'You have not selected any item to be added. Please do so.')
                msg.setDefaultButton(QMessageBox.Ok)
                msg.exec_()
            else:
                x = []
                x.clear()
                for i in range(len(itemsSelected)):
                    x.append(itemsSelected[i].text())
                self.dlg.listWidgetSelectedInstitutions.clear()
                self.dlg.listWidgetSelectedInstitutions.addItems(x)
        else:
            itemsSelected = self.dlg.listWidgetBasemapList.selectedItems()
            numberSelectedElements = len(itemsSelected)
            if (numberSelectedElements == 0):
                msg = QMessageBox()
                msg.setWindowTitle('Add Items')
                msg.setText('You must select an item to be added')
                msg.setIcon(QMessageBox.Information)
                msg.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
                msg.setDetailedText(
                    'You have not selected any item to be added. Please do so.')
                msg.setDefaultButton(QMessageBox.Ok)
                msg.exec_()
            else:
                x = []
                x.clear()
                # self.iface.reloadConnections()
                for i in range(len(itemsSelected)):
                    x.append(itemsSelected[i].text())
                self.dlg.listWidgetSelectedBasemaps.clear()
                self.dlg.listWidgetSelectedBasemaps.addItems(x)

    def removeSelectedItems(self, id):
        if id == 0:
            itemsSelected = self.dlg.listWidgetSelectedInstitutions.selectedItems()
            numberSelectedElements = len(itemsSelected)
            if (numberSelectedElements == 0):
                msg = QMessageBox()
                msg.setWindowTitle('Remove Items')
                msg.setText('You must select an item to be removed')
                msg.setIcon(QMessageBox.Information)
                msg.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
                msg.setDetailedText(
                    'You have not selected any item to be removed. Please do so.')
                msg.setDefaultButton(QMessageBox.Ok)
                msg.exec_()
            else:
                for i in itemsSelected:
                    self.dlg.listWidgetSelectedInstitutions.takeItem(
                        self.dlg.listWidgetSelectedInstitutions.row(i))
        else:
            itemsSelected = self.dlg.listWidgetSelectedBasemaps.selectedItems()
            numberSelectedElements = len(itemsSelected)
            if (numberSelectedElements == 0):
                msg = QMessageBox()
                msg.setWindowTitle('Remove Items')
                msg.setText('You must select an item to be removed')
                msg.setIcon(QMessageBox.Information)
                msg.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
                msg.setDetailedText(
                    'You have not selected any item to be removed. Please do so.')
                msg.setDefaultButton(QMessageBox.Ok)
                msg.exec_()
            else:
                for i in itemsSelected:
                    self.dlg.listWidgetSelectedBasemaps.takeItem(
                        self.dlg.listWidgetSelectedBasemaps.row(i))

    def removeAllItems(self, id):
        if id == 0:
            self.dlg.listWidgetSelectedInstitutions.clear()
        else:
            self.dlg.listWidgetSelectedBasemaps.clear()

    def setOwsConnection(self, sdi, connectionList):
        # connection type, connection name,  authcfg, password, referer, url, username, zmax, zmin
        for obj in connectionList:
            cType = obj.connectionType
            cName = obj.connectionName
            sdi.setValue("qgis/%s/%s/authcfg" %
                         (cType, cName), obj.connectionAuthcfg)
            sdi.setValue('qgis/%s/%s/password' %
                         (cType, cName), obj.connectionPassword)
            sdi.setValue("qgis/%s/%s/referer" %
                         (cType, cName), obj.connectionReferer)
            sdi.setValue("qgis/%s/%s/url" % (cType, cName), obj.connectionUrl)
            sdi.setValue("qgis/%s/%s/username" %
                         (cType, cName), obj.connectionUsername)
            sdi.setValue("qgis/%s/%s/zmax" %
                         (cType, cName), obj.connectionZmax)
            sdi.setValue("qgis/%s/%s/zmin" %
                         (cType, cName), obj.connectionZmin)
        self.iface.reloadConnections()

    def addWmsConnection(self, ogc, sdi, connectionList, connectionAtributtes):

        itemsToBeAdd = []
        connectionList.clear()

        for i in range(self.dlg.listWidgetSelectedInstitutions.count()):
            itemsToBeAdd.append(
                self.dlg.listWidgetSelectedInstitutions.item(i).text())

        if 'ANA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ANA", "", "", "",
                                                       "http://wms.snirh.gov.br/arcgis/services/SNIRH/2016/MapServer/WMSServer/wms", "", "22", "0"))
        if 'ANATEL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ANATEL", "", "", "",
                                                       "http://sistemas.anatel.gov.br/geoserver/ANATEL/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'BNDES' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "BNDES", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/BNDES/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'CENSIPAM' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CENSIPAM", "", "", "",
                                                       "http://panorama.sipam.gov.br/geoserver/publico/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'CMR_FUNAI' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CMR_FUNAI", "", "", "",
                                                       "http://cmr.funai.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'CPRM' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CPRM", "", "", "",
                                                       "http://sace.cprm.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EB_DSG' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EB_DSG", "", "", "",
                                                       "http://www.geoportal.eb.mil.br/mapcache3857?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA ALGODAO' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA ALGODAO", "", "", "",
                                                       "http://geoinfo.cnpa.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA AMAZONIA ORIENTAL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA AMAZONIA ORIENTAl", "", "", "",
                                                       "http://geoinfo.cpatu.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA CAPRINOS E OVINOS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA CAPRINOS E OVINOS", "", "", "",
                                                       "http://atlas.geoinfo.cnpm.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA CLIMA TEMPERADO' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA CLIMA TEMPERADO", "", "", "",
                                                       "http://geoinfo.cpact.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA FLORESTAS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA FLORESTAS", "", "", "",
                                                       "http://geoinfo.cnpf.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA GADO DE LEITE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA GADO DE LEITE", "", "", "",
                                                       "http://geoinfo.cnpgl.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA INFORMATICA AGROPECUARIA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA INFOAGRO", "", "", "",
                                                       "http://geoinfo.cnptia.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA MEIO AMBIENTE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA MEIO AMBIENTE", "", "", "",
                                                       "http://geoinfo.cnpma.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA PECUARIA SUDESTE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA PECUARIA SUDESTE", "", "", "",
                                                       "http://geoinfo.cppse.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA RONDONIA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA RONDONIA", "", "", "",
                                                       "http://atlas.geoinfo.cnpm.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA SOLOS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA SOLOS", "", "", "",
                                                       "http://geoinfo.cnps.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA TABULEIROS COSTEIROS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA TABULEIROS COSTEIROS", "", "", "",
                                                       "http://geoinfo.cpatc.embrapa.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA TERRITORIAL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA TERRITORIAL", "", "", "",
                                                       "https://geoaisweb.decea.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'FAB_ICA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "FAB_ICA", "", "", "",
                                                       "http://www.aisweb.decea.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IBAMA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IBAMA", "", "", "",
                                                       "https://geoaisweb.decea.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IBGE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IBGE", "", "", "",
                                                       "https://geoservicos.ibge.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IBGE_ODS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IBGE_ODS", "", "", "",
                                                       "https://geoservicos.ibge.gov.br/geoserver/ODS/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'INDE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INDE", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'INPE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INPE", "", "", "",
                                                       "http://terrabrasilis.dpi.inpe.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'INPE FOCOS DE CALOR' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INPE FOCOS DE CALOR", "", "", "",
                                                       "http://queimadas.dgi.inpe.br/queimadas/mapas/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IPHAN' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IPHAN", "", "", "",
                                                       "http://portal.iphan.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'MDIC' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "MDIC", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/MDIC/wms", "", "22", "0"))
        if 'MP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "MP", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/MPOG/wms", "", "22", "0"))
        if 'SFB' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SFB", "", "", "",
                                                       "https://sistemas.florestal.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'SPM' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SPM", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/SPM/wms", "", "22", "0"))
        if 'CELEPAR_PR' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CELEPAR_PR", "", "", "",
                                                       "http://geoserver.pr.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IDEA_SP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDEA_SP", "", "", "",
                                                       "http://datageo.ambiente.sp.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IDE_SP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDE_SP", "", "", "",
                                                       "https://ide.emplasa.sp.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IDE_ES_GEOBASES' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDE_ES_GEOBASES", "", "", "",
                                                       "https://ide.geobases.es.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IDE_MG' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDE_MG", "", "", "",
                                                       "http://geoserver.meioambiente.mg.gov.br/wms?request=GetCapabilities", "", "22", "0"))
        if 'INEA_RJ' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INEA_RJ", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/INEA/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'PRODEMG' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "PRODEMG", "", "", "",
                                                       "http://geoserver.prodemge.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'SEPLAG_AL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SEPLAG_AL", "", "", "",
                                                       "http://geo.seplande.al.gov.br/teogc/terraogcwms.cgi?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'SEFIN' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SEFIN", "", "", "",
                                                       "https://geoserver.sefin.fortaleza.ce.gov.br/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'PREFEITURA DE BELO HORIZONTE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "PREFEITURA DE BH", "", "", "",
                                                       "http://bhmap.pbh.gov.br/v2/api/idebhgeo/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'UFABC_SP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "UFABC_SP", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/UFABC/ows?service=wms&version=1.3.0&request=GetCapabilities", "", "22", "0"))

        self.setOwsConnection(sdi, connectionList)

    def addWfsConnection(self, ogc, sdi, connectionList, connectionAtributtes):

        itemsToBeAdd = []
        connectionList.clear()

        for i in range(self.dlg.listWidgetSelectedInstitutions.count()):
            itemsToBeAdd.append(
                self.dlg.listWidgetSelectedInstitutions.item(i).text())

        if 'ANA' in itemsToBeAdd:
            institution = 'ANA'
            self.noService(ogc, institution)

        if 'ANATEL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ANATEL", "", "", "",
                                                       "http://sistemas.anatel.gov.br/geoserver/ANATEL/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'BNDES' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "BNDES", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/BNDES/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'CENSIPAM' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CENSIPAM", "", "", "",
                                                       "http://panorama.sipam.gov.br/geoserver/publico/ows/?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'CMR_FUNAI' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CMR_FUNAI", "", "", "",
                                                       "http://cmr.funai.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'CPRM' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CPRM", "", "", "",
                                                       "https://geoservicos.cprm.gov.br/geoserver/geologia/ows/?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EB_DSG' in itemsToBeAdd:
            institution = 'EB_DSG'
            self.noService(ogc, institution)
        if 'EMBRAPA ALGODAO' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA ALGODAO", "", "", "",
                                                       "http://geoinfo.cnpa.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA AMAZONIA ORIENTAL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA AMAZONIA ORIENTAl", "", "", "",
                                                       "http://geoinfo.cpatu.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA CAPRINOS E OVINOS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA CAPRINOS E OVINOS", "", "", "",
                                                       "http://atlas.geoinfo.cnpm.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA CLIMA TEMPERADO' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA CLIMA TEMPERADO", "", "", "",
                                                       "http://geoinfo.cpact.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA FLORESTAS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA FLORESTAS", "", "", "",
                                                       "http://geoinfo.cnpf.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA GADO DE LEITE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA GADO DE LEITE", "", "", "",
                                                       "http://geoinfo.cnpgl.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA INFORMATICA AGROPECUARIA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA INFOAGRO", "", "", "",
                                                       "http://geoinfo.cnptia.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA MEIO AMBIENTE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA MEIO AMBIENTE", "", "", "",
                                                       "http://geoinfo.cnpma.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA PECUARIA SUDESTE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA PECUARIA SUDESTE", "", "", "",
                                                       "http://geoinfo.cppse.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA RONDONIA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA RONDONIA", "", "", "",
                                                       "http://atlas.geoinfo.cnpm.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA SOLOS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA SOLOS", "", "", "",
                                                       "http://geoinfo.cnps.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA TABULEIROS COSTEIROS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA TABULEIROS COSTEIROS", "", "", "",
                                                       "http://geoinfo.cpatc.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA TERRITORIAL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA TERRITORIAL", "", "", "",
                                                       "http://geoinfo.cnpm.embrapa.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'FAB_ICA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "FAB_ICA", "", "", "",
                                                       "https://geoaisweb.decea.gov.br/geoserver/ows?service=wfs&version=2.0.0&request=GetCapabilities", "", "22", "0"))
        if 'IBAMA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IBAMA", "", "", "",
                                                       "http://siscom.ibama.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IBGE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IBGE", "", "", "",
                                                       "https://geoservicos.ibge.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IBGE_ODS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IBGE_ODS", "", "", "",
                                                       "https://geoservicos.ibge.gov.br/geoserver/ODS/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'INDE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INDE", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))

        if 'INPE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INPE", "", "", "",
                                                       "http://terrabrasilis.dpi.inpe.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'INPE FOCOS DE CALOR' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INPE FOCOS DE CALOR", "", "", "",
                                                       "http://queimadas.dgi.inpe.br/queimadas/mapas/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IPHAN' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IPHAN", "", "", "",
                                                       "http://portal.iphan.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'MDIC' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "MDIC", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/MDIC/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'MP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "MP", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/MPOG/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'SFB' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SFB", "", "", "",
                                                       "https://sistemas.florestal.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'SPM' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SPM", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/SPM/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'CELEPAR_PR' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CELEPAR_PR", "", "", "",
                                                       "http://geoserver.pr.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IDE_DF' in itemsToBeAdd:
            institution = 'IDE_DF'
            self.noService(ogc, institution)
        if 'IDEA_SP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDEA_SP", "", "", "",
                                                       "http://datageo.ambiente.sp.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IDE_SP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDE_SP", "", "", "",
                                                       "https://ide.emplasa.sp.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IDE_ES_GEOBASES' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDE_ES_GEOBASES", "", "", "",
                                                       "https://ide.geobases.es.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'IDE_MG' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDE_MG", "", "", "",
                                                       "http://geoserver.meioambiente.mg.gov.br/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'INEA_RJ' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INEA_RJ", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/INEA/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'PRODEMG' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "PRODEMG", "", "", "",
                                                       "http://geoserver.prodemge.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'SEPLAG_AL' in itemsToBeAdd:
            institution = 'SEPLAG_AL'
            self.noService(ogc, institution)
        if 'SEFIN' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SEFIN", "", "", "",
                                                       "https://geoserver.sefin.fortaleza.ce.gov.br/geoserver/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'PREFEITURA DE BELO HORIZONTE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "PREFEITURA DE BH", "", "", "",
                                                       "http://bhmap.pbh.gov.br/v2/api/idebhgeo/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))
        if 'UFABC_SP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "UFABC_SP", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/UFABC/ows?service=wfs&version=1.3.0&request=GetCapabilities", "", "22", "0"))

        self.setOwsConnection(sdi, connectionList)

    def addWcsConnection(self, ogc, sdi, connectionList, connectionAtributtes):

        itemsToBeAdd = []
        connectionList.clear()

        for i in range(self.dlg.listWidgetSelectedInstitutions.count()):
            itemsToBeAdd.append(
                self.dlg.listWidgetSelectedInstitutions.item(i).text())

        if 'ANA' in itemsToBeAdd:
            institution = 'ANA'
            self.noService(ogc, institution)

        if 'ANATEL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ANATEL", "", "", "",
                                                       "http://sistemas.anatel.gov.br/geoserver/ANATEL/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'BNDES' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "BNDES", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/BNDES/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'CENSIPAM' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CENSIPAM", "", "", "",
                                                       "http://panorama.sipam.gov.br/geoserver/publico/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'CMR_FUNAI' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CMR_FUNAI", "", "", "",
                                                       "http://cmr.funai.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'CPRM' in itemsToBeAdd:
            institution = 'CPRM'
            self.noService(ogc, institution)
        if 'EB_DSG' in itemsToBeAdd:
            institution = 'EB_DSG'
            self.noService(ogc, institution)
        if 'EMBRAPA ALGODAO' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA ALGODAO", "", "", "",
                                                       "http://geoinfo.cnpa.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA AMAZONIA ORIENTAL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA AMAZONIA ORIENTAl", "", "", "",
                                                       "http://geoinfo.cpatu.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA CAPRINOS E OVINOS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA CAPRINOS E OVINOS", "", "", "",
                                                       "http://atlas.geoinfo.cnpm.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA CLIMA TEMPERADO' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA CLIMA TEMPERADO", "", "", "",
                                                       "http://geoinfo.cpact.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA FLORESTAS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA FLORESTAS", "", "", "",
                                                       "http://geoinfo.cnpf.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA GADO DE LEITE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA GADO DE LEITE", "", "", "",
                                                       "http://geoinfo.cnpgl.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA INFORMATICA AGROPECUARIA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA INFOAGRO", "", "", "",
                                                       "http://geoinfo.cnptia.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA MEIO AMBIENTE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA MEIO AMBIENTE", "", "", "",
                                                       "http://geoinfo.cnpma.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA PECUARIA SUDESTE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA PECUARIA SUDESTE", "", "", "",
                                                       "http://geoinfo.cppse.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA RONDONIA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA RONDONIA", "", "", "",
                                                       "http://atlas.geoinfo.cnpm.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA SOLOS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA SOLOS", "", "", "",
                                                       "http://geoinfo.cnps.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA TABULEIROS COSTEIROS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA TABULEIROS COSTEIROS", "", "", "",
                                                       "http://geoinfo.cpatc.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'EMBRAPA TERRITORIAL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "EMBRAPA TERRITORIAL", "", "", "",
                                                       "http://geoinfo.cnpm.embrapa.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'FAB_ICA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "FAB_ICA", "", "", "",
                                                       "https://geoaisweb.decea.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'IBAMA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IBAMA", "", "", "",
                                                       "http://siscom.ibama.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'IBGE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IBGE", "", "", "",
                                                       "https://geoservicos.ibge.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'IBGE_ODS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IBGE_ODS", "", "", "",
                                                       "https://geoservicos.ibge.gov.br/geoserver/ODS/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'INDE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INDE", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))

        if 'INPE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INPE", "", "", "",
                                                       "http://terrabrasilis.dpi.inpe.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'INPE FOCOS DE CALOR' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INPE FOCOS DE CALOR", "", "", "",
                                                       "http://queimadas.dgi.inpe.br/queimadas/mapas/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'IPHAN' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IPHAN", "", "", "",
                                                       "http://portal.iphan.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'MDIC' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "MDIC", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/MDIC/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'MP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "MP", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/MPOG/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'SFB' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SFB", "", "", "",
                                                       "https://sistemas.florestal.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'SPM' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SPM", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/SPM/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'CELEPAR_PR' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CELEPAR_PR", "", "", "",
                                                       "http://geoserver.pr.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'IDE_DF' in itemsToBeAdd:
            institution = 'IDE_DF'
            self.noService(ogc, institution)

        if 'IDEA_SP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDEA_SP", "", "", "",
                                                       "http://datageo.ambiente.sp.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'IDE_SP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDE_SP", "", "", "",
                                                       "https://ide.emplasa.sp.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'IDE_ES_GEOBASES' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDE_ES_GEOBASES", "", "", "",
                                                       "https://ide.geobases.es.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'IDE_MG' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "IDE_MG", "", "", "",
                                                       "http://geoserver.meioambiente.mg.gov.br/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'INEA_RJ' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "INEA_RJ", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/INEA/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'PRODEMG' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "PRODEMG", "", "", "",
                                                       "http://geoserver.prodemge.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'SEPLAG_AL' in itemsToBeAdd:
            institution = 'SEPLAG_AL'
            self.noService(ogc, institution)
        if 'SEFIN' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SEFIN", "", "", "",
                                                       "https://geoserver.sefin.fortaleza.ce.gov.br/geoserver/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'PREFEITURA DE BELO HORIZONTE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "PREFEITURA DE BH", "", "", "",
                                                       "http://bhmap.pbh.gov.br/v2/api/idebhgeo/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))
        if 'UFABC_SP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "UFABC_SP", "", "", "",
                                                       "https://geoservicos.inde.gov.br/geoserver/UFABC/ows?service=WCS&version=2.0.1&request=GetCapabilities", "", "22", "0"))

        self.setOwsConnection(sdi, connectionList)

    def getGroupXYZ(self, ogc, sdi):
        ows_service = 'qgis/'+ogc
        sdi.beginGroup(ows_service)
        groupsXYZ = sdi.childGroups()
        sdi.endGroup()
        return groupsXYZ

    def addXyzConnection(self, ogc, sdi, connectionList, connectionAtributtes):

        itemsToBeAdd = []
        connectionList.clear()

        for i in range(self.dlg.listWidgetSelectedBasemaps.count()):
            itemsToBeAdd.append(
                self.dlg.listWidgetSelectedBasemaps.item(i).text())

        if 'OSM STANDARD' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM STANDARD", "", "", "",
                                                       "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM OPENTOPOMAP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM OPENTOPOMAP", "", "", "",
                                                       "https://a.tile.opentopomap.org/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM HOT' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM HOT", "", "", "",
                                                       "https://a.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM DEUTSCHLAND' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM DEUTSCHLAND", "", "", "",
                                                       "https://a.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM SWITZERLAND' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM SWITZERLAND", "", "", "",
                                                       "https://tile.osm.ch/switzerland/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM FRANCE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM FRANCE", "", "", "",
                                                       "https://a.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM BREZHONEG' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM BREZHONEG", "", "", "",
                                                       "https://tile.openstreetmap.bzh/br/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM VELOROAD' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM VELOROAD", "", "", "",
                                                       "http://tile.osmz.ru/veloroad/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM TRACKS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM TRACKS", "", "", "",
                                                       "http://gps-a.tile.openstreetmap.org/lines/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM MONOCHROME' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM MONOCHROME", "", "", "",
                                                       "http://a.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM HIKE & BIKE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM HIKE & BIKE", "", "", "",
                                                       "https://tiles.wmflabs.org/hikebike/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM HILLSHADING' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM HILLSHADING", "", "", "",
                                                       "http://tiles.wmflabs.org/hillshading/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM GRAYSCALE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM GRAYSCALE", "", "", "",
                                                       "https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png", "", "22", "0"))
        if 'OSM NO LABELS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OSM NO LABELS", "", "", "",
                                                       "https://tiles.wmflabs.org/osm-no-labels/{z}/{x}/{y}.png", "", "22", "0"))

        if 'GOOGLE SATELLITE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "GOOGLE SATELLITE", "", "", "",
                                                       "https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}", "", "22", "0"))
        if 'GOOGLE TERRAIN' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "GOOGLE TERRAIN", "", "", "",
                                                       "https://mt1.google.com/vt/lyrs=t&x={x}&y={y}&z={z}", "", "22", "0"))
        if 'GOOGLE TERRAIN HYBRID' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "GOOGLE TERRAIN HYBRID", "", "", "",
                                                       "https://mt1.google.com/vt/lyrs=p&x={x}&y={y}&z={z}", "", "22", "0"))
        if 'GOOGLE SATELLITE HYBRID' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "GOOGLE SATELLITE HYBRID", "", "", "",
                                                       "https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}", "", "22", "0"))
        if 'GOOGLE TRAFFIC' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "GOOGLE TRAFFIC", "", "", "",
                                                       "https://mt1.google.com/vt?lyrs=h@159000000,traffic|seconds_into_week:-1&style=3&x={x}&y={y}&z={z}", "", "22", "0"))
        if 'GOOGLE ROAD' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "GOOGLE ROAD", "", "", "",
                                                       "https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}", "", "22", "0"))
        if 'GOOGLE MAPS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "GOOGLE MAPS", "", "", "",
                                                       "https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}", "", "22", "0"))
        if 'GOOGLE NORMAL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "GOOGLE NORMAL", "", "", "",
                                                       "http://www.google.cn/maps/vt?lyrs=m@189&gl=cn&x={x}&y={y}&z={z}", "", "22", "0"))
        if 'GOOGLE SAT' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "GOOGLE SAT", "", "", "",
                                                       "http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}", "", "22", "0"))
        if 'ESRI BOUNDARIES PLACES' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI BOUNDARIES PLACES", "", "", "",
                                                       "https://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI GRAY DARK' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI GRAY DARK", "", "", "",
                                                       "http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Dark_Gray_Base/MapServer/tile/{z}/{y}/{x", "", "22", "0"))
        if 'ESRI GRAY LIGHT' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI GRAY LIGHT", "", "", "",
                                                       "http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI NATIONAL GEOGRAPHIC' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI NATIONAL GEOGRAPHIC", "", "", "",
                                                       "http://services.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI OCEAN' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI OCEAN", "", "", "",
                                                       "https://services.arcgisonline.com/ArcGIS/rest/services/Ocean/World_Ocean_Base/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI PHYSICAL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI PHYSICAL", "", "", "",
                                                       "https://server.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI REFERENCE OVERLAY' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI REFERENCE OVERLAY", "", "", "",
                                                       "https://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Reference_Overlay/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI SATELLITE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI SATELLITE", "", "", "",
                                                       "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI WORLD IMAGERY' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI WORLD IMAGERY", "", "", "",
                                                       "https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI SHADED RELIEF' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI SHADED RELIEF", "", "", "",
                                                       "https://server.arcgisonline.com/ArcGIS/rest/services/World_Shaded_Relief/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI STANDARD' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI STANDARD", "", "", "",
                                                       "https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI TERRAIN' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI TERRAIN ", "", "", "",
                                                       "https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI WORLD TOPO' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI WORLD TOPO", "", "", "",
                                                       "http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'ESRI TRANSPORTATION' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "ESRI TRANSPORTATION", "", "", "",
                                                       "https://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Transportation/MapServer/tile/{z}/{y}/{x}", "", "22", "0"))
        if 'STAMEN TERRAIN' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN TERRAIN", "", "", "",
                                                       "http://a.tile.stamen.com/terrain/{z}/{x}/{y}.png", "", "22", "0"))
        if 'STAMEN TERRAIN BACKGROUND' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN TERRAIN BACKGROUND", "", "", "",
                                                       "http://a.tile.stamen.com/terrain-background/{z}/{x}/{y}.png", "", "22", "0"))
        if 'STAMEN TERRAIN LABELS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN TERRAIN LABELS", "", "", "",
                                                       "http://a.tile.stamen.com/terrain-labels/{z}/{x}/{y}.png", "", "22", "0"))
        if 'STAMEN TERRAIN LINES' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN TERRAIN LINES", "", "", "",
                                                       "http://a.tile.stamen.com/terrain-lines/{z}/{x}/{y}.png", "", "22", "0"))
        if 'STAMEN TONER' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN TONER", "", "", "",
                                                       "http://tile.stamen.com/toner/{z}/{x}/{y}.png", "", "22", "0"))
        if 'STAMEN TONER RETINA' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN TONER RETINA", "", "", "",
                                                       "http://tile.stamen.com/toner/{z}/{x}/{y}@2x.png", "", "22", "0"))
        if 'STAMEN TONER BACKGROUND' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN TONER BACKGROUND", "", "", "",
                                                       "http://tile.stamen.com/toner-background/{z}/{x}/{y}.png", "", "22", "0"))
        if 'STAMEN TONER HYBRID' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN TONER HYBRID", "", "", "",
                                                       "http://tile.stamen.com/toner-hybrid/{z}/{x}/{y}.png", "", "22", "0"))
        if 'STAMEN TONER LABELS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN TONER LABELS", "", "", "",
                                                       "http://tile.stamen.com/toner-labels/{z}/{x}/{y}.png", "", "22", "0"))
        if 'STAMEN TONER LITE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN TONER LITE", "", "", "",
                                                       "http://tile.stamen.com/toner-lite/{z}/{x}/{y}.png", "", "22", "0"))
        if 'STAMEN WATERCOLOR' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "STAMEN WATERCOLOR", "", "", "",
                                                       "http://tile.stamen.com/watercolor/{z}/{x}/{y}.jpg", "", "22", "0"))
        if 'BING MAP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "BING MAP", "", "", "",
                                                       "http://ecn.dynamic.t0.tiles.virtualearth.net/comp/CompositionHandler/{q}?mkt=en-us&it=G,VE,BX,L,LA&shading=hill", "", "22", "0"))
        if 'BING SATELLITE' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "BING SATELLITE", "", "", "",
                                                       "http://ecn.t3.tiles.virtualearth.net/tiles/a{q}.jpeg?g=0&dir=dir_n'", "", "22", "0"))
        if 'BING AERIAL' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "BING AERIAL", "", "", "",
                                                       "http://ecn.t3.tiles.virtualearth.net/tiles/a{q}.jpeg?g=1", "", "22", "0"))
        if 'CARTODB DARK MATTER' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CARTODB DARK MATTER", "", "", "",
                                                       "http://a.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png", "", "22", "0"))
        if 'CARTODB DARK MATTER NO LABELS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CARTODB DARK MATTER NO LABELS", "", "", "",
                                                       "http://a.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}.png", "", "22", "0"))
        if 'CARTODB POSITRON' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CARTODB POSITRON", "", "", "",
                                                       "http://a.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png", "", "22", "0"))
        if 'CARTODB POSITRON NO LABELS' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CARTODB POSITRON NO LABELS", "", "", "",
                                                       "http://a.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png", "", "22", "0"))
        if 'CARTODB VOYAGER' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CARTODB VOYAGER", "", "", "",
                                                       "https://a.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png", "", "22", "0"))
        if 'OPENRAILWAYMAP' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "OPENRAILWAYMAP", "", "", "",
                                                       "https://a.tiles.openrailwaymap.org/standard/{z}/{x}/{y}.png", "", "22", "0"))
        if 'SAFECAST' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "SAFECAST", "", "", "",
                                                       "https://s3.amazonaws.com/te512.safecast.org/{z}/{x}/{y}.png", "", "22", "0"))
        if 'CYCLOSM' in itemsToBeAdd:
            connectionList.append(connectionAtributtes(ogc, "CYCLOSM", "", "", "",
                                                       "https://a.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png", "", "22", "0"))

        self.setOwsConnection(sdi, connectionList)

    def removeAllConnectionsXYZ(self, ogc, sdi):
        ows_service = 'qgis/' + ogc
        groupsXYZ = sdi.childGroups()

        for group in groupsXYZ:
            sdi.beginGroup(ows_service)
            sdi.remove("")
            sdi.endGroup()
        self.iface.reloadConnections()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = INDEDialog()

            class connectionAtributtes:
                def __init__(
                        self,
                        connectionType,
                        connectionName,
                        connectionAuthcfg,
                        connectionPassword,
                        connectionReferer,
                        connectionUrl,
                        connectionUsername,
                        connectionZmax,
                        connectionZmin):
                    self.connectionType = connectionType
                    self.connectionName = connectionName
                    self.connectionAuthcfg = connectionAuthcfg
                    self.connectionPassword = connectionPassword
                    self.connectionReferer = connectionReferer
                    self.connectionUrl = connectionUrl
                    self.connectionUsername = connectionUsername
                    self.connectionZmax = connectionZmax
                    self.connectionZmin = connectionZmin

            connectionList = []
            sdi = QSettings()
            owsConnectionType = {
                "xyz": 'connections-xyz',
                "wms": 'connections-wms',
                "wfs": 'connections-wfs',
                "wcs": 'connections-wcs',
            }
            wms = owsConnectionType.get('wms')
            wfs = owsConnectionType.get('wfs')
            wcs = owsConnectionType.get('wcs')
            xyz = owsConnectionType.get('xyz')

            institutionsId = 0
            institutions = ['ANA',
                            'ANATEL',
                            'BNDES',
                            'CENSIPAM',
                            'CMR_FUNAI',
                            'EB_DSG',
                            'EMBRAPA ALGODAO',
                            'EMBRAPA AMAZONIA ORIENTAL',
                            'EMBRAPA CAPRINOS E OVINOS',
                            'EMBRAPA CLIMA TEMPERADO',
                            'EMBRAPA FLORESTAS',
                            'EMPRAPA INFORMATICA APROPECUARIA',
                            'EMBRAPA MEIO AMBIENTE',
                            'EMBRAPA PECUARIA SUDESTE',
                            'EMBRAPA RONDONIA',
                            'EMBRAPA SOLOS',
                            'EMBRAPA TABULEIROS COSTEIROS',
                            'EMBRAPA TERRITORIAL',
                            'FAB_ICA',
                            'IBAMA',
                            'IBGE',
                            'INDE',
                            'INPE',
                            'INPE FOCOS DE CALOR',
                            'IPHAN',
                            'MDIC',
                            'MP',
                            'IBGE_ODS',
                            'SFB',
                            'SPM',
                            'CELEPAR_PR',
                            'IDE_DF',
                            'IDEA_SP',
                            'IDE_SP',
                            'IDE_ES_GEOBASES',
                            'SEPLAG_AL',
                            'SEFIN',
                            'PREFEITURA DE BELO HORIZONTE',
                            'UFABC_SP',
                            ]
            basemapsId = 1
            basemaps = [
                'GOOGLE SATELLITE',
                'GOOGLE TERRAIN',
                'GOOGLE TERRAIN HYBRID',
                'GOOGLE SATELLITE HYBRID',
                'GOOGLE ROAD',
                'GOOGLE MAPS',
                'GOOGLE NORMAL',
                'GOOGLE SAT',
                'STAMEN TONER',
                'STAMEN TONER LIGHT',
                'STAMEN WATERCOLOR',
                'ESRI BOUNDARIES PLACES',
                'ESRI GRAY DARK',
                'ESRI GRAY LIGHT',
                'ESRI NATIONAL GEOGRAPHIC',
                'ESRI OCEAN',
                'ESRI PHYSICAL',
                'ESRI REFERENCE OVERLAY',
                'ESRI SHADED RELIEF',
                'ESRI SATELLITE',
                'ESRI WORLD IMAGERY',
                'ESRI STANDARD',
                'ESRI TERRAIN',
                'ESRI WORLD TOPO',
                'OSM STANDARD',
                'OSM OPENTOPOMAP',
                'OSM HOT',
                'OSM DEUTSCHLAND',
                'OSM SWITZERLAND',
                'OSM FRANCE',
                'OSM BREZHONEG',
                'OSM TRACKS',
                'OSM MONOCHROME',
                'OSM HIKE & BIKE',
                'OSM HILLSHADING',
                'OSM GRAYSCALE',
                'OSM NO LABELS',
                'STAMEN TERRAIN',
                'STAMEN TERRAIN BACKGROUND',
                'STAMEN TERRAIN LABELS',
                'STAMEN TONER',
                'STAMEN TONER RETINA',
                'STAMEN TONER BACKGROUND',
                'STAMEN TONER HYBRID',
                'STAMEN TONER LABELS',
                'STAMEN TONER LITE',
                'STAMEN WATERCOLOR',
                'BING MAP',
                'BING SATELLITE',
                'BING AERIAL',
                'CARTODB DARK MATTER',
                'CARTODB DARK MATTER NO LABELS',
                'CARTODB POSITRON',
                'CARTODB POSITRON NO LABELS',
                'CARTODB VOYAGER',
                'OPENRAILWAYMAP',
                'SAFECAST',
                'CYCLOSM'
            ]

            self.populatelistWidget(institutions, institutionsId)
            self.populatelistWidget(basemaps, basemapsId)
            self.dlg.buttonAddAllItems.clicked.connect(lambda:
                                                       self.addAllItems(institutions, institutionsId))
            self.dlg.buttonAddAllBasemaps.clicked.connect(lambda:
                                                          self.addAllItems(basemaps, basemapsId))

            self.dlg.buttonAddSelectedItems.clicked.connect(lambda:
                                                            self.addSelectedItems(institutionsId))
            self.dlg.buttonAddSelectedBasemaps.clicked.connect(lambda:
                                                               self.addSelectedItems(basemapsId))
            self.dlg.listWidgetSelectedInstitutions.setSelectionMode(3)
            self.dlg.listWidgetSelectedBasemaps.setSelectionMode(3)
            self.dlg.buttonRemoveSelectedItems.clicked.connect(lambda:
                                                               self.removeSelectedItems(institutionsId))
            self.dlg.buttonRemoveSelectedBasemaps.clicked.connect(lambda:
                                                                  self.removeSelectedItems(basemapsId))
            self.dlg.buttonRemoveAllItems.clicked.connect(lambda:
                                                          self.removeAllItems(institutionsId))
            self.dlg.buttonRemoveAllBasemaps.clicked.connect(lambda:
                                                             self.removeAllItems(basemapsId))
            self.dlg.loadWmsLayers.clicked.connect(
                lambda: self.addWmsConnection(wms, sdi, connectionList, connectionAtributtes))
            self.dlg.loadWfsLayers.clicked.connect(
                lambda: self.addWfsConnection(wfs, sdi, connectionList, connectionAtributtes))
            self.dlg.loadWcsLayers.clicked.connect(
                lambda: self.addWcsConnection(wcs, sdi, connectionList, connectionAtributtes))
            self.dlg.loadXyzLayers.clicked.connect(
                lambda: self.addXyzConnection(xyz, sdi, connectionList, connectionAtributtes))
            self.dlg.wipeAllConnectionsWms.clicked.connect(lambda:
                                                           self.removeAllConnectionsXYZ(wms, sdi))
            self.dlg.wipeAllConnectionsWfs.clicked.connect(lambda:
                                                           self.removeAllConnectionsXYZ(wfs, sdi))
            self.dlg.wipeAllConnectionsWcs.clicked.connect(lambda:
                                                           self.removeAllConnectionsXYZ(wcs, sdi))
            self.dlg.wipeAllConnectionsXyz.clicked.connect(lambda:
                                                           self.removeAllConnectionsXYZ(xyz, sdi))

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
